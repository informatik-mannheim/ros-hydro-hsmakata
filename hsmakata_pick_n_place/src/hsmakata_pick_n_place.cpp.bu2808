#include <ros/ros.h>

#include <tf/tf.h>

#include <moveit/move_group_interface/move_group.h>

#include <geometry_msgs/PoseStamped.h>
#include <moveit_msgs/AttachedCollisionObject.h>
#include <moveit_msgs/CollisionObject.h>
#include <moveit_msgs/Grasp.h>
#include <visualization_msgs/Marker.h>
#include <visualization_msgs/MarkerArray.h>

#include <shape_tools/solid_primitive_dims.h>

ros::Publisher pub_co;
ros::Publisher pub_aco;
ros::Publisher grasps_marker;

moveit_msgs::CollisionObject co;
moveit_msgs::AttachedCollisionObject aco;

void add_collision_object()
{
    ROS_INFO("Adding collision object.");
    co.operation = moveit_msgs::CollisionObject::ADD;
    pub_co.publish(co);
}
void remove_collision_object()
{
    ROS_INFO("Removing collision object.");
    co.operation = moveit_msgs::CollisionObject::REMOVE;
    pub_co.publish(co);
}
void add_attached_collision_object()
{
    ROS_INFO("Adding attached collision object.");
    aco.object.operation = moveit_msgs::CollisionObject::ADD;
    pub_aco.publish(aco);
}
void remove_attached_collision_object()
{
    ROS_INFO("Removing attached collision object.");
    aco.object.operation = moveit_msgs::CollisionObject::REMOVE;
    pub_aco.publish(aco);
}

void hypo(double &x, double &y, float dist)
{
    double alpha = atan2(y,x);
    double xs = cos(alpha)*dist;
    double ys = sin(alpha)*dist;

    x -= xs;
    y -= ys;
}


void make_pose_reachable_by_5DOF_katana(geometry_msgs::PoseStamped &pose)
{

    tf::Quaternion q;

    double roll, pitch, yaw;
    tf::quaternionMsgToTF(pose.pose.orientation, q);


    tf::Matrix3x3(q).getRPY(roll, pitch, yaw);

    //determine yaw which is compatible with the Katana 300 180 kinematics.
    yaw = atan2(pose.pose.position.y, pose.pose.position.x);

    tf::Quaternion quat = tf::createQuaternionFromRPY(0, pitch, yaw);

    pose.pose.orientation.x = quat.getX();
    pose.pose.orientation.y = quat.getY();
    pose.pose.orientation.z = quat.getZ();
    pose.pose.orientation.w = quat.getW();

}

moveit_msgs::Grasp tf_transform_to_grasp(tf::Transform t)
{
    static int i = 0;

    moveit_msgs::Grasp grasp;
    geometry_msgs::PoseStamped pose;

    tf::Vector3& origin = t.getOrigin();
    tf::Quaternion rotation = t.getRotation();

    tf::quaternionTFToMsg(rotation, pose.pose.orientation);

    pose.header.frame_id = "base_link";
    pose.header.stamp = ros::Time::now();
    pose.pose.position.x = origin.m_floats[0];
    pose.pose.position.y = origin.m_floats[1];
    pose.pose.position.z = origin.m_floats[2];

    grasp.grasp_pose = pose;
    double x = grasp.grasp_pose.pose.position.x;
    double y = grasp.grasp_pose.pose.position.y;
    hypo(x,y,0.1);

    grasp.id = boost::lexical_cast<std::string>(i);

    grasp.pre_grasp_approach.direction.vector.x = 1.0;
    grasp.post_grasp_retreat.direction.vector.z = -1.0;

    grasp.pre_grasp_approach.direction.header.frame_id = "katana_gripper_tool_frame";
    grasp.pre_grasp_approach.min_distance = 0.07;
    grasp.pre_grasp_approach.desired_distance = 0.1;
    grasp.pre_grasp_approach.direction.header.stamp = ros::Time::now();

    grasp.post_grasp_retreat.direction.vector.x = -1.0;
    grasp.post_grasp_retreat.direction.vector.z = 1.0;
    grasp.post_grasp_retreat.min_distance = 0.08;
    grasp.post_grasp_retreat.desired_distance = 0.12;

    grasp.post_grasp_retreat.direction.header.frame_id = "katana_gripper_tool_frame";
    grasp.post_grasp_retreat.direction.header.stamp = ros::Time::now();

    // TODO: fill in grasp.post_place_retreat (copy of post_grasp_retreat?)

    grasp.pre_grasp_posture.joint_names.push_back("katana_l_finger_joint");
    grasp.pre_grasp_posture.joint_names.push_back("katana_r_finger_joint");
    grasp.pre_grasp_posture.points.resize(1);
    grasp.pre_grasp_posture.points[0].positions.push_back(0.3);
    grasp.pre_grasp_posture.points[0].positions.push_back(0.3);

    grasp.grasp_posture.joint_names.push_back("katana_l_finger_joint");
    grasp.grasp_posture.joint_names.push_back("katana_r_finger_joint");
    grasp.grasp_posture.points.resize(1);
    grasp.grasp_posture.points[0].positions.push_back(-0.44);
    grasp.grasp_posture.points[0].positions.push_back(-0.44);

    grasp.allowed_touch_objects.resize(1);
    grasp.allowed_touch_objects[0] = "testbox";

    i++;
    return grasp;
}

void publish_grasps_as_markerarray(std::vector<moveit_msgs::Grasp> grasps)
{
    visualization_msgs::MarkerArray markers;
    int i = 0;

    for(std::vector<moveit_msgs::Grasp>::iterator it = grasps.begin(); it != grasps.end(); ++it)
    {
        visualization_msgs::Marker marker;
        marker.header.stamp = ros::Time::now();
        marker.header.frame_id = "base_link";
        marker.id = i;
        marker.type = 0;
        marker.ns = "graspmarker";
        marker.pose = it->grasp_pose.pose;
        marker.scale.x = 0.1;
        marker.scale.y = 0.01;
        marker.scale.z = 0.01;
        marker.color.b = 1;
        marker.color.a = 1;
        markers.markers.push_back(marker);
        i++;
    }

    grasps_marker.publish(markers);
}


std::vector<moveit_msgs::Grasp> generate_grasps(double x,double y,double z)
{
    static const double ANGLE_INC = M_PI / 16;
    static const double START_ANGLE = (3* M_PI)/2;
    // how far from the grasp center should the wrist be?
    static const double STANDOFF = -0.01;

    std::vector<moveit_msgs::Grasp> grasps;

    tf::Transform transform;
    transform.setOrigin(tf::Vector3(x, y, z));
    transform.setRotation(tf::createQuaternionFromRPY(0.0, 0.0, 0.0));

    tf::Transform standoff_trans;
    standoff_trans.setOrigin(tf::Vector3(STANDOFF, 0.0, 0.0));
    standoff_trans.setRotation(tf::Quaternion(0.0, sqrt(2)/2, 0.0, sqrt(2)/2));

    //
    //  \ | /
    // --   -- 0
    //  / | \ pi/4
    //   pi/2

    double roll = 0.0;
    double yaw = atan2(y, x);

    //for (double pitch = -ANGLE_MAX - 4*ANGLE_INC ; pitch <= STRAIGHT_ANGLE_MIN - ANGLE_MAX/2  +0.01; pitch += ANGLE_INC)
    for (int cnt = 0 ; cnt <= 3; cnt++)
    {
        transform.setOrigin(tf::Vector3(x, y, z));
        transform.setRotation(tf::createQuaternionFromRPY(roll, START_ANGLE + cnt*ANGLE_INC, yaw));
        grasps.push_back(tf_transform_to_grasp(transform * standoff_trans));

        if(cnt != 0)
        {
            transform.setOrigin(tf::Vector3(x, y, z));
            transform.setRotation(tf::createQuaternionFromRPY(roll, START_ANGLE - cnt*ANGLE_INC, yaw));
            grasps.push_back(tf_transform_to_grasp(transform * standoff_trans));
        }
    }

    publish_grasps_as_markerarray(grasps);

    return grasps;
}

bool place(moveit::planning_interface::MoveGroup &group, double x, double y, double z)
{
    static const double ANGLE_INC = M_PI / 16;
    static const double START_ANGLE = 0;

    std::vector<moveit_msgs::PlaceLocation> loc;
    double yaw = atan2(y, x);
    for(int cnt = 0; cnt < 3; cnt++)
    //for (double pitch = -2*ANGLE_INC ; pitch <= 2*ANGLE_INC + 0.001; pitch += ANGLE_INC)
    {
        geometry_msgs::PoseStamped p;
        p.header.frame_id = "base_link";
        p.pose.position.x = x;
        p.pose.position.y = y;
        p.pose.position.z = z;
        tf::quaternionTFToMsg(tf::createQuaternionFromRPY(0.0, START_ANGLE - cnt*ANGLE_INC, yaw), p.pose.orientation);

        moveit_msgs::PlaceLocation g;
        g.place_pose = p;

        g.pre_place_approach.direction.vector.x = 1.0;
        g.pre_place_approach.direction.vector.z = -1.0;
        g.pre_place_approach.direction.header.frame_id = "base_link";
        g.pre_place_approach.min_distance = 0.08;
        g.pre_place_approach.desired_distance = 0.12;

        //g.post_place_retreat.direction.vector.x = -1.0;
        g.post_place_retreat.direction.vector.z = 1.0;
        g.post_place_retreat.direction.header.frame_id = "base_link";
        g.post_place_retreat.min_distance = 0.08;
        g.post_place_retreat.desired_distance = 0.12;

        g.post_place_posture.joint_names.push_back("katana_l_finger_joint");
        g.post_place_posture.joint_names.push_back("katana_r_finger_joint");
        g.post_place_posture.points.resize(1);
        g.post_place_posture.points[0].positions.push_back(0.3);
        g.post_place_posture.points[0].positions.push_back(0.3);

        // not sure whether we need this
        g.allowed_touch_objects.resize(1);
        g.allowed_touch_objects[0] = "testbox";

        loc.push_back(g);


        if(cnt != 0)
        {
            p.header.frame_id = "base_link";
            p.pose.position.x = x;
            p.pose.position.y = y;
            p.pose.position.z = z;
            tf::quaternionTFToMsg(tf::createQuaternionFromRPY(0.0, START_ANGLE + cnt*ANGLE_INC, yaw), p.pose.orientation);

            moveit_msgs::PlaceLocation g;
            g.place_pose = p;

            //g.pre_place_approach.direction.vector.x = 1.0;
            g.pre_place_approach.direction.vector.z = -1.0;
            g.pre_place_approach.direction.header.frame_id = "base_link";
            g.pre_place_approach.min_distance = 0.08;
            g.pre_place_approach.desired_distance = 0.12;

            //g.post_place_retreat.direction.vector.x = -1.0;
            g.post_place_retreat.direction.vector.z = 1.0;
            g.post_place_retreat.direction.header.frame_id = "base_link";
            g.post_place_retreat.min_distance = 0.08;
            g.post_place_retreat.desired_distance = 0.12;

            g.post_place_posture.joint_names.push_back("katana_l_finger_joint");
            g.post_place_posture.joint_names.push_back("katana_r_finger_joint");
            g.post_place_posture.points.resize(1);
            g.post_place_posture.points[0].positions.push_back(0.3);
            g.post_place_posture.points[0].positions.push_back(0.3);

            // not sure whether we need this
            g.allowed_touch_objects.resize(1);
            g.allowed_touch_objects[0] = "testbox";

            loc.push_back(g);
        }
    }

    visualization_msgs::MarkerArray markers;
    int i = 0;

    for(std::vector<moveit_msgs::PlaceLocation>::iterator it = loc.begin(); it != loc.end(); ++it)
    {
        visualization_msgs::Marker marker;
        marker.header.stamp = ros::Time::now();
        marker.header.frame_id = "base_link";
        marker.id = i;
        marker.type = 0;
        marker.ns = "graspmarker";
        marker.pose = it->place_pose.pose;
        marker.scale.x = 0.1;
        marker.scale.y = 0.01;
        marker.scale.z = 0.01;
        marker.color.r = 1;
        marker.color.a = 1;
        markers.markers.push_back(marker);
        i++;
    }

    grasps_marker.publish(markers);

    group.setSupportSurfaceName("testbox");

    return group.place("testbox", loc);
}


int main(int argc, char **argv)
{
    bool success = false;
    double x = 0.48; //0.58;
    double y = -0.2;
    double z = 0.45; //0.51

    ros::init (argc, argv, "hsmakata_pick_n_place_demo");
    ros::NodeHandle nh;
    ros::AsyncSpinner spinner(1);
    spinner.start();

    pub_co = nh.advertise<moveit_msgs::CollisionObject>("collision_object", 10);
    pub_aco = nh.advertise<moveit_msgs::AttachedCollisionObject>("attached_collision_object", 10);
    grasps_marker = nh.advertise<visualization_msgs::MarkerArray>("grasps_marker", 10);

    moveit::planning_interface::MoveGroup group("manipulator");
    group.setPlanningTime(45.0);
    group.setNumPlanningAttempts(10);
    group.allowReplanning(true);
    group.clearPathConstraints();
    group.setGoalPositionTolerance(0.01);
    group.setGoalTolerance(0.01);

    geometry_msgs::Pose target_pose1;
    target_pose1.orientation.w = 1.0;
    target_pose1.position.x = 0.5;
    target_pose1.position.y = 0.2;
    target_pose1.position.z = 0.5;
    group.setPoseTarget(target_pose1);
    moveit::planning_interface::MoveGroup::Plan my_plan;
    success = group.plan(my_plan);

    ROS_INFO("Visualizing plan 1 (pose goal) %s",success?"":"FAILED");
    /* Sleep to give Rviz time to visualize the plan. */
    sleep(5.0);

    /*
    group.setStartState(*group.getCurrentState());

    group.setNamedTarget("home");
    group.move();

    ros::WallDuration(1.0).sleep();

    group.setNamedTarget("pick_approach");
    group.move();

    ros::WallDuration(1.0).sleep();

    //group.setNamedTarget("home");
    //group.move();
    */

    co.header.stamp = ros::Time::now();
    co.header.frame_id = "base_link";
    co.id = "testbox";
    co.primitives.resize(1);
    co.primitives[0].type = shape_msgs::SolidPrimitive::CYLINDER;
    co.primitives[0].dimensions.resize(shape_tools::SolidPrimitiveDimCount<shape_msgs::SolidPrimitive::CYLINDER>::value);
    co.primitives[0].dimensions[shape_msgs::SolidPrimitive::CYLINDER_RADIUS] = 0.035;
    co.primitives[0].dimensions[shape_msgs::SolidPrimitive::CYLINDER_HEIGHT] = 0.14;
    //co.primitives[0].dimensions[shape_msgs::SolidPrimitive::BOX_Z] = 0.14;
    co.primitive_poses.resize(1);
    co.primitive_poses[0].position.x = x-0.03;
    co.primitive_poses[0].position.y = y;
    co.primitive_poses[0].position.z = z;
    co.primitive_poses[0].orientation.w = 1.0;

    aco.object = co;
    aco.link_name = "katana_gripper_tool_frame";

    add_collision_object();
    ros::WallDuration(1.0).sleep();

    ROS_INFO("Generating Grasps");
    std::vector<moveit_msgs::Grasp> grasps = generate_grasps(x, y, z);
    publish_grasps_as_markerarray(grasps);

    success = group.pick("testbox",grasps);
    if (success)
    {
        ROS_INFO("Pick was successful.");
    }
    else
    {
        ROS_FATAL("Pick failed.");
        return EXIT_FAILURE;
    }

    group.setStartState(*group.getCurrentState());

    ros::WallDuration(3.0).sleep();
    /*
    group.setNamedTarget("retreat");
    group.move();

    ros::WallDuration(3.0).sleep();

    //group.setStartState(*group.getCurrentState());
    group.setNamedTarget("arm_far_away");
    group.move();

    ros::WallDuration(5.0).sleep();

    group.setNamedTarget("pick_approach");
    group.move();

    ros::WallDuration(3.0).sleep();
    */
    success = place(group,x, 0.3, z);
    if (success)
    {

        ROS_INFO("Place was successful.");
    }
    else
    {
        ROS_FATAL("Place failed.");
        return EXIT_FAILURE;
    }

    group.setStartState(*group.getCurrentState());
    remove_collision_object();

    group.setStartState(*group.getCurrentState());
    group.setNamedTarget("home");
    group.move();
    geometry_msgs::PoseStamped po = group.getCurrentPose();
    ROS_INFO("x: %f y: %f z: %f",po.pose.position.x,po.pose.position.y,po.pose.position.z);
    ROS_INFO("w: %f, x: %f y: %f z: %f",po.pose.orientation.w, po.pose.orientation.x, po.pose.orientation.y, po.pose.orientation.z);
    //success = group.pick(co.id,grasps);

}

